/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
//typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
//typedef float _Complex GoComplex64;
//typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* GetPCID();
extern GoInt64 StringToStamp(char* s);
extern char* StampToString(GoInt64 stamp);
extern char* Sign(char* s, GoInt64 stamp);
extern GoUint8 Verify(char* s);
extern GoInt64 ReadLimit(char* s);
extern char* ReadPCID(char* s);
extern char* ReadSig(char* s);
extern char* InviteCode(GoInt64 no, GoInt64 idx);
extern char* VerifyInvite(char* c);
extern GoInt64 InvitePhone(char* c);
extern GoInt64 InviteIndex(char* c);
extern char* GetUserCode(char* c);
extern char* UpdateUserCode(char* c, GoInt64 lmt);
extern char* SignUserCode(char* c);
extern GoUint8 VerifyUserCode(char* c);
extern GoInt64 GetLimit(char* c);
extern char* GetCPU(char* c);
extern GoInt64 GetPhoneNum(char* c);
extern GoInt64 GetIndex(char* c);

#ifdef __cplusplus
}
#endif
